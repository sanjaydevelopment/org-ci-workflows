name: Python Checks

on:
  workflow_call:
    secrets: inherit

permissions:
  contents: read
  issues: write

jobs:
  run-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Initialize results
        run: |
          echo "REQ_RESULT=success" >> $GITHUB_ENV
          echo "STRUCT_RESULT=success" >> $GITHUB_ENV
          echo "SECRET_RESULT=success" >> $GITHUB_ENV
          echo "LINT_RESULT=success" >> $GITHUB_ENV
          echo "SECURITY_RESULT=success" >> $GITHUB_ENV

      # ---------------- Mandatory Checks ----------------
      - name: Check for requirements.txt
        run: |
          if [ ! -f "requirements.txt" ]; then
            echo "REQ_RESULT=fail" >> $GITHUB_ENV
            echo "::error::‚ùå Missing requirements.txt file"
            exit 1
          fi
          echo "‚úÖ Found requirements.txt"

      - name: Check project structure
        run: |
          if [ ! -d "src" ]; then
            echo "STRUCT_RESULT=fail" >> $GITHUB_ENV
            echo "::error::‚ùå Missing src directory"
            exit 1
          fi
          echo "‚úÖ Found src directory"

      # ---------------- Optional Checks ----------------
      - name: Check for hardcoded sensitive values
        continue-on-error: true
        run: |
          if grep -r -i -E "(password|api_key|secret|token)" . --exclude-dir=.git 2>/dev/null | grep -v "node_modules"; then
            echo "SECRET_RESULT=fail" >> $GITHUB_ENV
            echo "::warning::‚ö†Ô∏è Potential sensitive values found in code"
          else
            echo "‚úÖ No sensitive values detected"
          fi

      - name: Run lint (flake8)
        continue-on-error: true
        run: |
          pip install flake8
          if ! flake8 . --exclude=.git; then
            echo "LINT_RESULT=fail" >> $GITHUB_ENV
            echo "::warning::‚ö†Ô∏è Lint issues found"
          else
            echo "‚úÖ Lint passed"
          fi

      - name: Run security check (bandit)
        continue-on-error: true
        run: |
          pip install bandit
          if ! bandit -r . --exclude=.git -f json -o bandit_output.json; then
            echo "SECURITY_RESULT=fail" >> $GITHUB_ENV
            echo "::warning::‚ö†Ô∏è Security issues found"
          else
            echo "‚úÖ Security check passed"
          fi

      # ---------------- Publish Summary ----------------
      - name: Publish summary
        if: always()
        run: |
          echo "## üö¶ Python Checks Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY

          if [ "$REQ_RESULT" = "success" ]; then echo "| requirements.txt | ‚úÖ PASS |" >> $GITHUB_STEP_SUMMARY; else echo "| requirements.txt | ‚ùå FAIL |" >> $GITHUB_STEP_SUMMARY; fi
          if [ "$STRUCT_RESULT" = "success" ]; then echo "| Project structure | ‚úÖ PASS |" >> $GITHUB_STEP_SUMMARY; else echo "| Project structure | ‚ùå FAIL |" >> $GITHUB_STEP_SUMMARY; fi
          if [ "$SECRET_RESULT" = "success" ]; then echo "| Sensitive values | ‚úÖ PASS |" >> $GITHUB_STEP_SUMMARY; else echo "| Sensitive values | ‚ö†Ô∏è WARNING |" >> $GITHUB_STEP_SUMMARY; fi
          if [ "$LINT_RESULT" = "success" ]; then echo "| Lint | ‚úÖ PASS |" >> $GITHUB_STEP_SUMMARY; else echo "| Lint | ‚ö†Ô∏è WARNING |" >> $GITHUB_STEP_SUMMARY; fi
          if [ "$SECURITY_RESULT" = "success" ]; then echo "| Security check | ‚úÖ PASS |" >> $GITHUB_STEP_SUMMARY; else echo "| Security check | ‚ö†Ô∏è WARNING |" >> $GITHUB_STEP_SUMMARY; fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Next Steps" >> $GITHUB_STEP_SUMMARY
          if [ "$REQ_RESULT" = "fail" ] || [ "$STRUCT_RESULT" = "fail" ]; then
            echo "- ‚ùå Fix mandatory checks first" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚úÖ All checks passed! üéâ" >> $GITHUB_STEP_SUMMARY
          fi

      # ---------------- Fail Job if Mandatory Checks Fail ----------------
      - name: Fail job if mandatory checks failed
        if: always()
        run: |
          if [ "$REQ_RESULT" = "fail" ] || [ "$STRUCT_RESULT" = "fail" ]; then
            echo "‚ùå Mandatory checks failed - blocking merge"
            exit 1
          fi
          echo "‚úÖ All mandatory checks passed"

      # ---------------- Create/Update Issue ----------------
      - name: Create Issue for Failed Checks
        if: always() && (env.REQ_RESULT == 'fail' || env.STRUCT_RESULT == 'fail' || env.SECRET_RESULT == 'fail' || env.LINT_RESULT == 'fail' || env.SECURITY_RESULT == 'fail')
        uses: dacbd/create-issue-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "üîç Python Quality Checks - Issues Found"
          body: |
            ## üö® Python Checks Failed
            
            Your recent code changes triggered some quality check failures:
            
            ### Failed Checks:
            ${{ env.REQ_RESULT }}, ${{ env.STRUCT_RESULT }}, ${{ env.SECRET_RESULT }}, ${{ env.LINT_RESULT }}, ${{ env.SECURITY_RESULT }}
            
            ### Details:
            - **Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            - **Commit**: `${{ github.sha }}`
            - **Branch**: `${{ github.ref_name }}`
            
            ### üìã Action Required:
            1. Review the [Actions summary](#) for detailed logs
            2. Fix the issues and push your changes
            3. The workflow will re-run automatically
            
            **Note**: Mandatory checks (requirements.txt, project structure) must pass before merging.
            
            ---
            *This issue was automatically created by Python Checks workflow*
