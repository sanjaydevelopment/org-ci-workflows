name: Python Checks

on:
  workflow_call:

permissions:
  contents: read
  issues: write

jobs:
  run-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Initialize results
        run: |
          echo "REQ_RESULT=success" >> $GITHUB_ENV
          echo "STRUCT_RESULT=success" >> $GITHUB_ENV
          echo "SECRET_RESULT=success" >> $GITHUB_ENV
          echo "LINT_RESULT=success" >> $GITHUB_ENV
          echo "SECURITY_RESULT=success" >> $GITHUB_ENV

      # ---------------- Mandatory Checks ----------------
      - name: Check for requirements.txt
        run: |
          if [ ! -f "requirements.txt" ]; then
            echo "REQ_RESULT=fail" >> $GITHUB_ENV
            echo "::error::❌ Missing requirements.txt file"
            exit 1
          fi
          echo "✅ Found requirements.txt"

      - name: Check project structure
        run: |
          if [ ! -d "src" ]; then
            echo "STRUCT_RESULT=fail" >> $GITHUB_ENV
            echo "::error::❌ Missing src directory"
            exit 1
          fi
          echo "✅ Found src directory"

      # ---------------- Optional Checks ----------------
      - name: Check for hardcoded sensitive values
        continue-on-error: true
        run: |
          if grep -r -i -E "(password|api_key|secret|token)" . --exclude-dir=.git 2>/dev/null | grep -v "node_modules"; then
            echo "SECRET_RESULT=fail" >> $GITHUB_ENV
            echo "::warning::⚠️ Potential sensitive values found in code"
          else
            echo "✅ No sensitive values detected"
          fi

      - name: Run lint (flake8)
        continue-on-error: true
        run: |
          pip install flake8
          if ! flake8 . --exclude=.git; then
            echo "LINT_RESULT=fail" >> $GITHUB_ENV
            echo "::warning::⚠️ Lint issues found"
          else
            echo "✅ Lint passed"
          fi

      - name: Run security check (bandit)
        continue-on-error: true
        run: |
          pip install bandit
          if ! bandit -r . --exclude=.git -f json -o bandit_output.json; then
            echo "SECURITY_RESULT=fail" >> $GITHUB_ENV
            echo "::warning::⚠️ Security issues found"
          else
            echo "✅ Security check passed"
          fi

      # ---------------- Publish Summary ----------------
      - name: Publish summary
        if: always()
        run: |
          echo "## 🚦 Python Checks Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          if [ "$REQ_RESULT" = "success" ]; then echo "| requirements.txt | ✅ PASS |" >> $GITHUB_STEP_SUMMARY; else echo "| requirements.txt | ❌ FAIL |" >> $GITHUB_STEP_SUMMARY; fi
          if [ "$STRUCT_RESULT" = "success" ]; then echo "| Project structure | ✅ PASS |" >> $GITHUB_STEP_SUMMARY; else echo "| Project structure | ❌ FAIL |" >> $GITHUB_STEP_SUMMARY; fi
          if [ "$SECRET_RESULT" = "success" ]; then echo "| Sensitive values | ✅ PASS |" >> $GITHUB_STEP_SUMMARY; else echo "| Sensitive values | ⚠️ WARNING |" >> $GITHUB_STEP_SUMMARY; fi
          if [ "$LINT_RESULT" = "success" ]; then echo "| Lint | ✅ PASS |" >> $GITHUB_STEP_SUMMARY; else echo "| Lint | ⚠️ WARNING |" >> $GITHUB_STEP_SUMMARY; fi
          if [ "$SECURITY_RESULT" = "success" ]; then echo "| Security check | ✅ PASS |" >> $GITHUB_STEP_SUMMARY; else echo "| Security check | ⚠️ WARNING |" >> $GITHUB_STEP_SUMMARY; fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
          if [ "$REQ_RESULT" = "fail" ] || [ "$STRUCT_RESULT" = "fail" ]; then
            echo "- ❌ Fix mandatory checks first" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ✅ All checks passed! 🎉" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- 🔗 [View full workflow logs]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)" >> $GITHUB_STEP_SUMMARY

      # ---------------- Fail Job if Mandatory Checks Fail ----------------
      - name: Fail job if mandatory checks failed
        if: always()
        run: |
          if [ "$REQ_RESULT" = "fail" ] || [ "$STRUCT_RESULT" = "fail" ]; then
            echo "❌ Mandatory checks failed - blocking merge"
            exit 1
          fi
          echo "✅ All mandatory checks passed"

      # ---------------- Check for failed checks ----------------
      - name: Check for failed checks
        if: always()
        id: check-failures
        run: |
          FAILED_CHECKS=""
          if [ "$REQ_RESULT" = "fail" ]; then FAILED_CHECKS="$FAILED_CHECKS requirements.txt,"; fi
          if [ "$STRUCT_RESULT" = "fail" ]; then FAILED_CHECKS="$FAILED_CHECKS project structure,"; fi
          if [ "$SECRET_RESULT" = "fail" ]; then FAILED_CHECKS="$FAILED_CHECKS sensitive values,"; fi
          if [ "$LINT_RESULT" = "fail" ]; then FAILED_CHECKS="$FAILED_CHECKS lint,"; fi
          if [ "$SECURITY_RESULT" = "fail" ]; then FAILED_CHECKS="$FAILED_CHECKS security,"; fi
          
          if [ -n "$FAILED_CHECKS" ]; then
            FAILED_CHECKS=${FAILED_CHECKS%,}
            echo "failed_checks=$FAILED_CHECKS" >> $GITHUB_OUTPUT
            echo "has_failures=true" >> $GITHUB_OUTPUT
          else
            echo "has_failures=false" >> $GITHUB_OUTPUT
          fi

      # ---------------- Create Developer Issue (in project repo) ----------------
      - name: Create Developer Issue
        if: always() && steps.check-failures.outputs.has_failures == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "📝 Creating developer issue in $GITHUB_REPOSITORY..."
          
          # Get failed checks from step output
          FAILED_CHECKS="${{ steps.check-failures.outputs.failed_checks }}"
          
          # Simple string concatenation for clean YAML
          REPO_ISSUE_BODY="### 🚨 Python Quality Checks Failed\n\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY**Repository**: $GITHUB_REPOSITORY\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY**Branch**: $GITHUB_REF_NAME\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY**Commit**: [$GITHUB_SHA]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/commit/$GITHUB_SHA)\n\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY#### ❌ Failed Checks\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY- **$FAILED_CHECKS**\n\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY#### 📊 Check Results\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY| Check | Status |\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY|-------|--------|\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY| requirements.txt | $REQ_RESULT |\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY| Project Structure | $STRUCT_RESULT |\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY| Sensitive Values | $SECRET_RESULT |\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY| Code Style (Lint) | $LINT_RESULT |\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY| Security | $SECURITY_RESULT |\n\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY#### 🚨 Action Required\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY1. **Review** the [workflow logs]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY2. **Fix** the failed checks above\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY3. **Push** changes to re-run checks automatically\n\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY#### ⚠️ Important\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY- **Mandatory checks** (requirements.txt, project structure) **must pass** before merging\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY- Optional checks (lint, security) should be fixed for code quality\n\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY---\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY*Auto-generated by Python Checks workflow on $(date)*"

          # Create developer issue
          REPO_ISSUE=$(gh issue create \
            --title "🔍 [$FAILED_CHECKS] Python Quality Issues" \
            --body "$REPO_ISSUE_BODY" \
            --label "python-check-fail,bug,quality" \
            2>&1)
          
          if echo "$REPO_ISSUE" | grep -q "created"; then
            REPO_ISSUE_NUMBER=$(echo "$REPO_ISSUE" | grep -o '#[0-9]*' | head -1 | sed 's/#//')
            echo "✅ Created developer issue #$REPO_ISSUE_NUMBER"
            echo "repo_issue_number=$REPO_ISSUE_NUMBER" >> $GITHUB_OUTPUT
          else
            echo "❌ Developer issue creation failed!"
            echo "repo_issue_number=0" >> $GITHUB_OUTPUT
          fi
        id: create-dev-issue

      # ---------------- Create Leadership Issue (in central org repo) ----------------
      - name: Create Leadership Issue
        if: always() && steps.check-failures.outputs.has_failures == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "📊 Creating leadership issue in central org repo..."
          
          # Get failed checks and repo issue number from step outputs
          FAILED_CHECKS="${{ steps.check-failures.outputs.failed_checks }}"
          REPO_ISSUE_NUMBER="${{ steps.create-dev-issue.outputs.repo_issue_number }}"
          
          # Central repo for leadership issues - UPDATE THIS
          CENTRAL_REPO="sanjaydevelopment/Python-Quality-Issues"
          
          # Simple string concatenation for leadership issue body
          ORG_ISSUE_BODY="### 🚨 Python Quality Issue Detected\n\n"
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY**Repository**: $GITHUB_REPOSITORY\n"
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY**Branch**: $GITHUB_REF_NAME\n"
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY**Commit**: [$GITHUB_SHA]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/commit/$GITHUB_SHA)\n"
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY**Workflow**: [$GITHUB_RUN_ID]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)\n\n"
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY#### ❌ Failed Checks\n"
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY$FAILED_CHECKS\n\n"
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY#### 📊 Status Summary\n"
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY| Check | Result |\n"
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY|-------|--------|\n"
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY| requirements.txt | $REQ_RESULT |\n"
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY| Project Structure | $STRUCT_RESULT |\n"
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY| Sensitive Values | $SECRET_RESULT |\n"
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY| Code Style (Lint) | $LINT_RESULT |\n"
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY| Security | $SECURITY_RESULT |\n\n"
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY#### 🎯 Priority & Impact\n"

          if [ "$REQ_RESULT" = "fail" ] || [ "$STRUCT_RESULT" = "fail" ]; then
            ORG_ISSUE_BODY="$ORG_ISSUE_BODY**🚨 HIGH PRIORITY** - Blocks deployment/merge\n"
            ORG_ISSUE_BODY="$ORG_ISSUE_BODY- **Impact**: Cannot deploy until fixed\n"
            ORG_ISSUE_BODY="$ORG_ISSUE_BODY- **Timeline**: Immediate (same day)\n"
          else
            ORG_ISSUE_BODY="$ORG_ISSUE_BODY**⚠️ MEDIUM PRIORITY** - Quality concerns\n"
            ORG_ISSUE_BODY="$ORG_ISSUE_BODY- **Impact**: Code quality and maintainability\n"
            ORG_ISSUE_BODY="$ORG_ISSUE_BODY- **Timeline**: Within 1 week\n"
          fi

          # Add developer issue link if created
          if [ "$REPO_ISSUE_NUMBER" != "0" ]; then
            ORG_ISSUE_BODY="$ORG_ISSUE_BODY\n\n#### 🔗 Developer Action\n"
            ORG_ISSUE_BODY="$ORG_ISSUE_BODY- **Repo Issue**: #$REPO_ISSUE_NUMBER in $GITHUB_REPOSITORY\n"
          fi

          ORG_ISSUE_BODY="$ORG_ISSUE_BODY\n\n#### 📈 Business Impact\n"
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY- **Risk**: Potential security vulnerabilities or deployment failures\n"
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY- **Cost**: Developer time to fix + potential production issues\n"
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY- **ROI**: Early detection saves 5x the fix cost\n\n"
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY---\n"
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY*Auto-generated by Python Quality Gates - $(date)*"

          # Create leadership issue in central repo
          ORG_ISSUE=$(gh issue create \
            --repo "$CENTRAL_REPO" \
            --title "🚨 [$GITHUB_REPOSITORY] - $FAILED_CHECKS" \
            --body "$ORG_ISSUE_BODY" \
            --label "quality-issue,python,${GITHUB_REPOSITORY##*/}" \
            2>&1)
          
          if echo "$ORG_ISSUE" | grep -q "created"; then
            ORG_ISSUE_NUMBER=$(echo "$ORG_ISSUE" | grep -o '#[0-9]*' | head -1 | sed 's/#//')
            echo "✅ Created leadership issue #$ORG_ISSUE_NUMBER in $CENTRAL_REPO"
          else
            echo "❌ Leadership issue creation failed! Output: $ORG_ISSUE"
            echo "Falling back to same repo..."
            # Fallback: create in same repo if central repo doesn't exist
            gh issue create \
              --title "🚨 [$GITHUB_REPOSITORY] - $FAILED_CHECKS (FALLBACK)" \
              --body "$ORG_ISSUE_BODY" \
              --label "quality-issue,python,leadership" \
              2>&1 || echo "Fallback also failed"
          fi

      # ---------------- Success Notification ----------------
      - name: Notify on Success
        if: always() && steps.check-failures.outputs.has_failures == 'false'
        run: |
          echo "🎉 All Python quality checks passed successfully!"
          echo "✅ This commit is ready for review and merge."
