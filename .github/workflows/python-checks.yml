name: Python Checks

on:
  workflow_call:

permissions:
  contents: read
  issues: write

jobs:
  run-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Initialize results
        run: |
          echo "REQ_RESULT=success" >> $GITHUB_ENV
          echo "STRUCT_RESULT=success" >> $GITHUB_ENV
          echo "SECRET_RESULT=success" >> $GITHUB_ENV
          echo "LINT_RESULT=success" >> $GITHUB_ENV
          echo "SECURITY_RESULT=success" >> $GITHUB_ENV

      # ---------------- Mandatory Checks ----------------
      - name: Check for requirements.txt
        run: |
          if [ ! -f "requirements.txt" ]; then
            echo "REQ_RESULT=fail" >> $GITHUB_ENV
            echo "::error::‚ùå Missing requirements.txt file"
            exit 1
          fi
          echo "‚úÖ Found requirements.txt"

      - name: Check project structure
        run: |
          if [ ! -d "src" ]; then
            echo "STRUCT_RESULT=fail" >> $GITHUB_ENV
            echo "::error::‚ùå Missing src directory"
            exit 1
          fi
          echo "‚úÖ Found src directory"

      # ---------------- Optional Checks ----------------
      - name: Check for hardcoded sensitive values
        continue-on-error: true
        run: |
          if grep -r -i -E "(password|api_key|secret|token)" . --exclude-dir=.git 2>/dev/null | grep -v "node_modules"; then
            echo "SECRET_RESULT=fail" >> $GITHUB_ENV
            echo "::warning::‚ö†Ô∏è Potential sensitive values found in code"
          else
            echo "‚úÖ No sensitive values detected"
          fi

      - name: Run lint (flake8)
        continue-on-error: true
        run: |
          pip install flake8
          if ! flake8 . --exclude=.git; then
            echo "LINT_RESULT=fail" >> $GITHUB_ENV
            echo "::warning::‚ö†Ô∏è Lint issues found"
          else
            echo "‚úÖ Lint passed"
          fi

      - name: Run security check (bandit)
        continue-on-error: true
        run: |
          pip install bandit
          if ! bandit -r . --exclude=.git -f json -o bandit_output.json; then
            echo "SECURITY_RESULT=fail" >> $GITHUB_ENV
            echo "::warning::‚ö†Ô∏è Security issues found"
          else
            echo "‚úÖ Security check passed"
          fi

      # ---------------- Publish Summary ----------------
      - name: Publish summary
        if: always()
        run: |
          echo "## üö¶ Python Checks Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          if [ "$REQ_RESULT" = "success" ]; then echo "| requirements.txt | ‚úÖ PASS |" >> $GITHUB_STEP_SUMMARY; else echo "| requirements.txt | ‚ùå FAIL |" >> $GITHUB_STEP_SUMMARY; fi
          if [ "$STRUCT_RESULT" = "success" ]; then echo "| Project structure | ‚úÖ PASS |" >> $GITHUB_STEP_SUMMARY; else echo "| Project structure | ‚ùå FAIL |" >> $GITHUB_STEP_SUMMARY; fi
          if [ "$SECRET_RESULT" = "success" ]; then echo "| Sensitive values | ‚úÖ PASS |" >> $GITHUB_STEP_SUMMARY; else echo "| Sensitive values | ‚ö†Ô∏è WARNING |" >> $GITHUB_STEP_SUMMARY; fi
          if [ "$LINT_RESULT" = "success" ]; then echo "| Lint | ‚úÖ PASS |" >> $GITHUB_STEP_SUMMARY; else echo "| Lint | ‚ö†Ô∏è WARNING |" >> $GITHUB_STEP_SUMMARY; fi
          if [ "$SECURITY_RESULT" = "success" ]; then echo "| Security check | ‚úÖ PASS |" >> $GITHUB_STEP_SUMMARY; else echo "| Security check | ‚ö†Ô∏è WARNING |" >> $GITHUB_STEP_SUMMARY; fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Next Steps" >> $GITHUB_STEP_SUMMARY
          if [ "$REQ_RESULT" = "fail" ] || [ "$STRUCT_RESULT" = "fail" ]; then
            echo "- ‚ùå Fix mandatory checks first" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚úÖ All checks passed! üéâ" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- üîó [View full workflow logs]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)" >> $GITHUB_STEP_SUMMARY

      # ---------------- Fail Job if Mandatory Checks Fail ----------------
      - name: Fail job if mandatory checks failed
        if: always()
        run: |
          if [ "$REQ_RESULT" = "fail" ] || [ "$STRUCT_RESULT" = "fail" ]; then
            echo "‚ùå Mandatory checks failed - blocking merge"
            exit 1
          fi
          echo "‚úÖ All mandatory checks passed"

      # ---------------- Check for failed checks ----------------
      - name: Check for failed checks
        if: always()
        id: check-failures
        run: |
          FAILED_CHECKS=""
          if [ "$REQ_RESULT" = "fail" ]; then FAILED_CHECKS="$FAILED_CHECKS requirements.txt,"; fi
          if [ "$STRUCT_RESULT" = "fail" ]; then FAILED_CHECKS="$FAILED_CHECKS project structure,"; fi
          if [ "$SECRET_RESULT" = "fail" ]; then FAILED_CHECKS="$FAILED_CHECKS sensitive values,"; fi
          if [ "$LINT_RESULT" = "fail" ]; then FAILED_CHECKS="$FAILED_CHECKS lint,"; fi
          if [ "$SECURITY_RESULT" = "fail" ]; then FAILED_CHECKS="$FAILED_CHECKS security,"; fi
          
          if [ -n "$FAILED_CHECKS" ]; then
            FAILED_CHECKS=${FAILED_CHECKS%,}
            echo "failed_checks=$FAILED_CHECKS" >> $GITHUB_OUTPUT
            echo "has_failures=true" >> $GITHUB_OUTPUT
          else
            echo "has_failures=false" >> $GITHUB_OUTPUT
          fi

      # ---------------- Create Developer Issue (FIXED) ----------------
      - name: Create Developer Issue
        if: always() && steps.check-failures.outputs.has_failures == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üìù Creating developer issue in $GITHUB_REPOSITORY..."
          FAILED_CHECKS="${{ steps.check-failures.outputs.failed_checks }}"
          
          # Simple issue body - no complex formatting that might cause issues
          REPO_ISSUE_BODY="üö® Python Quality Checks Failed\n\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY**Failed**: $FAILED_CHECKS\n\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY**Repo**: $GITHUB_REPOSITORY\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY**Branch**: $GITHUB_REF_NAME\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY**Workflow**: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID\n\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY**Status**:\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY- requirements.txt: $REQ_RESULT\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY- Project structure: $STRUCT_RESULT\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY- Sensitive values: $SECRET_RESULT\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY- Lint: $LINT_RESULT\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY- Security: $SECURITY_RESULT\n\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY**Action Required**:\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY1. Fix the failed checks\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY2. Push changes to re-run checks\n\n"
          REPO_ISSUE_BODY="$REPO_ISSUE_BODY---\n*Auto-generated by Python Checks*"
          
          # Create issue WITHOUT labels first (to avoid label permission issues)
          REPO_ISSUE=$(gh issue create \
            --title "üîç [$FAILED_CHECKS] Python Quality Issues" \
            --body "$REPO_ISSUE_BODY" \
            2>&1)
          
          # Check if URL was returned (success)
          if [[ "$REPO_ISSUE" == http* ]]; then
            REPO_ISSUE_NUMBER=$(echo "$REPO_ISSUE" | grep -o '[0-9]\+$')
            echo "‚úÖ Created developer issue #$REPO_ISSUE_NUMBER"
            echo "repo_issue_number=$REPO_ISSUE_NUMBER" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Developer issue failed: $REPO_ISSUE"
            echo "repo_issue_number=0" >> $GITHUB_OUTPUT
          fi
        id: create-dev-issue

      # ---------------- Create Leadership Issue (FIXED) ----------------
      - name: Create Leadership Issue
        if: always() && steps.check-failures.outputs.has_failures == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üìä Creating leadership issue..."
          FAILED_CHECKS="${{ steps.check-failures.outputs.failed_checks }}"
          REPO_ISSUE_NUMBER="${{ steps.create-dev-issue.outputs.repo_issue_number }}"
          
          # For now, create in same repo until central repo is ready
          # CENTRAL_REPO="sanjaydevelopment/Python-Quality-Issues"
          
          # Simple leadership issue body
          ORG_ISSUE_BODY="üö® Python Quality Issue - LEADERSHIP VIEW\n\n"
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY**Repository**: $GITHUB_REPOSITORY\n"
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY**Failed**: $FAILED_CHECKS\n\n"
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY**Priority**: "
          
          if [ "$REQ_RESULT" = "fail" ] || [ "$STRUCT_RESULT" = "fail" ]; then
            ORG_ISSUE_BODY="$ORG_ISSUE_BODYüö® HIGH (blocks merge)\n"
          else
            ORG_ISSUE_BODY="$ORG_ISSUE_BODY‚ö†Ô∏è MEDIUM (quality)\n"
          fi
          
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY\n**Status Summary**:\n"
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY- requirements.txt: $REQ_RESULT\n"
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY- Project structure: $STRUCT_RESULT\n"
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY- Sensitive values: $SECRET_RESULT\n"
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY- Lint: $LINT_RESULT\n"
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY- Security: $SECURITY_RESULT\n\n"
          
          if [ "$REPO_ISSUE_NUMBER" != "0" ]; then
            ORG_ISSUE_BODY="$ORG_ISSUE_BODY**Developer Issue**: #$REPO_ISSUE_NUMBER\n"
          fi
          
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY\n---\n*For leadership dashboard*"
          
          # Create leadership issue in same repo
          ORG_ISSUE=$(gh issue create \
            --title "üö® [$GITHUB_REPOSITORY] $FAILED_CHECKS - LEADERSHIP" \
            --body "$ORG_ISSUE_BODY" \
            2>&1)
          
          # Check if URL was returned (success)
          if [[ "$ORG_ISSUE" == http* ]]; then
            ORG_ISSUE_NUMBER=$(echo "$ORG_ISSUE" | grep -o '[0-9]\+$')
            echo "‚úÖ Created leadership issue #$ORG_ISSUE_NUMBER"
          else
            echo "‚ùå Leadership issue failed: $ORG_ISSUE"
          fi

      # ---------------- Success Notification ----------------
      - name: Notify on Success
        if: always() && steps.check-failures.outputs.has_failures == 'false'
        run: |
          echo "üéâ All Python quality checks passed successfully!"
          echo "‚úÖ This commit is ready for review and merge."
