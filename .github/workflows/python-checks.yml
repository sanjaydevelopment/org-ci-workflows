name: Python Checks

on:
  workflow_call:

permissions:
  contents: read
  issues: write

jobs:
  run-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Initialize results
        run: |
          echo "REQ_RESULT=success" >> $GITHUB_ENV
          echo "STRUCT_RESULT=success" >> $GITHUB_ENV
          echo "SECRET_RESULT=success" >> $GITHUB_ENV
          echo "LINT_RESULT=success" >> $GITHUB_ENV
          echo "SECURITY_RESULT=success" >> $GITHUB_ENV

      # ---------------- Mandatory Checks ----------------
      - name: Check for requirements.txt
        run: |
          if [ ! -f "requirements.txt" ]; then
            echo "REQ_RESULT=fail" >> $GITHUB_ENV
            echo "::error::‚ùå Missing requirements.txt file"
            exit 1
          fi
          echo "‚úÖ Found requirements.txt"

      - name: Check project structure
        run: |
          if [ ! -d "src" ]; then
            echo "STRUCT_RESULT=fail" >> $GITHUB_ENV
            echo "::error::‚ùå Missing src directory"
            exit 1
          fi
          echo "‚úÖ Found src directory"

      # ---------------- Optional Checks ----------------
      - name: Check for hardcoded sensitive values
        continue-on-error: true
        run: |
          if grep -r -i -E "(password|api_key|secret|token)" . --exclude-dir=.git 2>/dev/null | grep -v "node_modules"; then
            echo "SECRET_RESULT=fail" >> $GITHUB_ENV
            echo "::warning::‚ö†Ô∏è Potential sensitive values found in code"
          else
            echo "‚úÖ No sensitive values detected"
          fi

      - name: Run lint (flake8)
        continue-on-error: true
        run: |
          pip install flake8
          if ! flake8 . --exclude=.git; then
            echo "LINT_RESULT=fail" >> $GITHUB_ENV
            echo "::warning::‚ö†Ô∏è Lint issues found"
          else
            echo "‚úÖ Lint passed"
          fi

      - name: Run security check (bandit)
        continue-on-error: true
        run: |
          pip install bandit
          if ! bandit -r . --exclude=.git -f json -o bandit_output.json; then
            echo "SECURITY_RESULT=fail" >> $GITHUB_ENV
            echo "::warning::‚ö†Ô∏è Security issues found"
          else
            echo "‚úÖ Security check passed"
          fi

      # ---------------- Publish Summary ----------------
      - name: Publish summary
        if: always()
        run: |
          echo "## üö¶ Python Checks Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY

          if [ "$REQ_RESULT" = "success" ]; then echo "| requirements.txt | ‚úÖ PASS |" >> $GITHUB_STEP_SUMMARY; else echo "| requirements.txt | ‚ùå FAIL |" >> $GITHUB_STEP_SUMMARY; fi
          if [ "$STRUCT_RESULT" = "success" ]; then echo "| Project structure | ‚úÖ PASS |" >> $GITHUB_STEP_SUMMARY; else echo "| Project structure | ‚ùå FAIL |" >> $GITHUB_STEP_SUMMARY; fi
          if [ "$SECRET_RESULT" = "success" ]; then echo "| Sensitive values | ‚úÖ PASS |" >> $GITHUB_STEP_SUMMARY; else echo "| Sensitive values | ‚ö†Ô∏è WARNING |" >> $GITHUB_STEP_SUMMARY; fi
          if [ "$LINT_RESULT" = "success" ]; then echo "| Lint | ‚úÖ PASS |" >> $GITHUB_STEP_SUMMARY; else echo "| Lint | ‚ö†Ô∏è WARNING |" >> $GITHUB_STEP_SUMMARY; fi
          if [ "$SECURITY_RESULT" = "success" ]; then echo "| Security check | ‚úÖ PASS |" >> $GITHUB_STEP_SUMMARY; else echo "| Security check | ‚ö†Ô∏è WARNING |" >> $GITHUB_STEP_SUMMARY; fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Next Steps" >> $GITHUB_STEP_SUMMARY
          if [ "$REQ_RESULT" = "fail" ] || [ "$STRUCT_RESULT" = "fail" ]; then
            echo "- ‚ùå Fix mandatory checks first" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚úÖ All checks passed! üéâ" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- üîó [View full workflow logs]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)" >> $GITHUB_STEP_SUMMARY

      # ---------------- Fail Job if Mandatory Checks Fail ----------------
      - name: Fail job if mandatory checks failed
        if: always()
        run: |
          if [ "$REQ_RESULT" = "fail" ] || [ "$STRUCT_RESULT" = "fail" ]; then
            echo "‚ùå Mandatory checks failed - blocking merge"
            exit 1
          fi
          echo "‚úÖ All mandatory checks passed"

      # ---------------- Check for failed checks ----------------
      - name: Check for failed checks
        if: always()
        id: check-failures
        run: |
          FAILED_CHECKS=""
          if [ "$REQ_RESULT" = "fail" ]; then FAILED_CHECKS="$FAILED_CHECKS requirements.txt,"; fi
          if [ "$STRUCT_RESULT" = "fail" ]; then FAILED_CHECKS="$FAILED_CHECKS project structure,"; fi
          if [ "$SECRET_RESULT" = "fail" ]; then FAILED_CHECKS="$FAILED_CHECKS sensitive values,"; fi
          if [ "$LINT_RESULT" = "fail" ]; then FAILED_CHECKS="$FAILED_CHECKS lint,"; fi
          if [ "$SECURITY_RESULT" = "fail" ]; then FAILED_CHECKS="$FAILED_CHECKS security,"; fi
          
          if [ -n "$FAILED_CHECKS" ]; then
            FAILED_CHECKS=${FAILED_CHECKS%,}
            echo "failed_checks=$FAILED_CHECKS" >> $GITHUB_OUTPUT
            echo "has_failures=true" >> $GITHUB_OUTPUT
            echo "‚ùå Failed checks detected: $FAILED_CHECKS"
          else
            echo "has_failures=false" >> $GITHUB_OUTPUT
            echo "‚úÖ All checks passed!"
          fi

      # ---------------- Create Issues (Repo + Org Project) - WITH DEBUG ----------------
      - name: Create Issues for Failed Checks
        if: always() && steps.check-failures.outputs.has_failures == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # ‚úÖ FIXED: Explicit GH_TOKEN for gh CLI
        run: |
          echo "üö® Creating issues for failed checks... DEBUG MODE ON"
          echo "DEBUG: Current repo = $GITHUB_REPOSITORY"
          echo "DEBUG: Failed checks = ${{ steps.check-failures.outputs.failed_checks }}"
          echo "DEBUG: GH_TOKEN set? = ${GH_TOKEN:+yes}"  # Checks if token is set
          
          # ---------------- REPO ISSUE (for developers) ----------------
          echo "üìù Creating developer issue in repo..."
          REPO_ISSUE_BODY="## üö® Python Checks Failed\n\n**Repository**: $GITHUB_REPOSITORY\n\n### Failed Checks:\n- **${{ steps.check-failures.outputs.failed_checks }}**\n\n### Details:\n| Field | Status |\n|-------|--------|\n| requirements.txt | $REQ_RESULT |\n| Project structure | $STRUCT_RESULT |\n| Sensitive values | $SECRET_RESULT |\n| Lint | $LINT_RESULT |\n| Security | $SECURITY_RESULT |\n\n### Action Required:\n1. Review the [workflow logs]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)\n2. Fix the issues above\n3. Push your changes to re-run checks\n\n**Note**: Mandatory checks (requirements.txt, project structure) must pass before merging.\n\n---\n*This issue was automatically created by Python Checks workflow*"
          
          echo "DEBUG: Creating repo issue with title 'üîç Python Quality Checks - Issues Found [$GITHUB_REF_NAME]'"
          REPO_ISSUE=$(gh issue create \
            --title "üîç Python Quality Checks - Issues Found [$GITHUB_REF_NAME]" \
            --body "$REPO_ISSUE_BODY" \
            --label "python-check-fail,automation,quality" \
            || echo "ERROR: Failed to create repo issue - check permissions/token")
          
          if [ "$REPO_ISSUE" != "ERROR: Failed to create repo issue - check permissions/token" ]; then
            REPO_ISSUE_NUMBER=$(echo $REPO_ISSUE | cut -d' ' -f1)
            echo "‚úÖ Created repo issue #$REPO_ISSUE_NUMBER"
          else
            echo "‚ùå Repo issue creation failed!"
            exit 1  # Stop if repo issue fails
          fi
          
          # ---------------- ORG PROJECT ISSUE (for leadership) ----------------
          echo "üìä Creating leadership issue for org project..."
          ORG_ISSUE_BODY="## üö® Python Quality Issue Detected\n\n**Repository**: $GITHUB_REPOSITORY\n**Branch**: $GITHUB_REF_NAME\n**Commit**: $GITHUB_SHA\n\n### Failed Checks:\n- **${{ steps.check-failures.outputs.failed_checks }}**\n\n### Status Summary:\n| Check | Result |\n|--------|--------|\n| requirements.txt | $REQ_RESULT |\n| Project structure | $STRUCT_RESULT |\n| Sensitive values | $SECRET_RESULT |\n| Lint | $LINT_RESULT |\n| Security | $SECURITY_RESULT |\n\n### Links:\n- **Repo Issue**: #$REPO_ISSUE_NUMBER in $GITHUB_REPOSITORY\n- **Workflow Run**: [$GITHUB_RUN_ID]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)\n- **Commit**: [$GITHUB_SHA]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/commit/$GITHUB_SHA)\n\n### Priority:\n"
          if [ "$REQ_RESULT" = "fail" ] || [ "$STRUCT_RESULT" = "fail" ]; then
            ORG_ISSUE_BODY="$ORG_ISSUE_BODY**üö® HIGH** - Mandatory checks failed (blocks merge)\n"
          else
            ORG_ISSUE_BODY="$ORG_ISSUE_BODY**‚ö†Ô∏è MEDIUM** - Quality issues detected\n"
          fi
          ORG_ISSUE_BODY="$ORG_ISSUE_BODY\n---\n*Auto-generated by Python Checks workflow*"
          
          # ‚úÖ CREATE ORG ISSUE - UPDATE CENTRAL_REPO BELOW
          CENTRAL_REPO="sanjaydevelopment/Python-Quality-Issues"  # ‚Üê CHANGE THIS TO YOUR ACTUAL CENTRAL REPO
          echo "DEBUG: Creating org issue in $CENTRAL_REPO"
          gh issue create \
            --title "üö® [$GITHUB_REPOSITORY] Python Checks Failed" \
            --body "$ORG_ISSUE_BODY" \
            --label "quality,python-check-fail" \
            --repo "$CENTRAL_REPO" \
            || echo "ERROR: Failed to create org issue - check if $CENTRAL_REPO exists and token has access"
          
          echo "‚úÖ Org issue creation attempted - check above for errors!"

      # ---------------- Success Notification ----------------
      - name: Notify on Success
        if: always() && steps.check-failures.outputs.has_failures == 'false'
        run: |
          echo "üéâ All Python quality checks passed successfully!"
          echo "‚úÖ This commit is ready for review and merge."
